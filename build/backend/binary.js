// Generated by CoffeeScript 1.8.0
var Promise, config, fs, log, path, pouch, remoteConfig, request, uuid;

fs = require('fs');

path = require('path');

request = require('request-json');

uuid = require('node-uuid');

log = require('printit')({
  prefix: 'Data Proxy | binary'
});

config = require('./config');

pouch = require('./db');

remoteConfig = config.getConfig();

module.exports = {
  moveFromDoc: function(doc, finalPath, callback) {
    return fs.renameAsync(doc.path, finalPath).then(function() {
      doc.path = finalPath;
      return pouch.db.putAsync(doc)["catch"](function(err) {
        if (err.status !== 409) {
          throw err;
        }
      });
    }).then(function() {
      return callback(null);
    })["catch"](function(err) {
      log.error(err.toString());
      console.error(err);
      return callback(err);
    });
  },
  uploadAsAttachment: function(remoteId, remoteRev, filePath, callback) {
    var client, deviceName, relativePath;
    deviceName = config.getDeviceName();
    relativePath = path.relative(remoteConfig.path, filePath);
    log.info("Uploading binary: " + relativePath);
    client = request.newClient(remoteConfig.url);
    client.setBasicAuth(deviceName, remoteConfig.devicePassword);
    return client.putFile("cozy/" + remoteId + "/file?rev=" + remoteRev, filePath, {}, function(err, res, body) {
      if (err != null) {
        throw err;
      }
      if (typeof body === 'string') {
        body = JSON.parse(body);
      }
      if (body.error != null) {
        throw new Error(body.error);
      }
      log.info("Binary uploaded: " + relativePath);
      return callback(err, body);
    });
  },
  createEmptyRemoteDoc: function(callback) {
    var client, deviceName, newId;
    deviceName = config.getDeviceName();
    newId = uuid.v4().split('-').join('');
    client = request.newClient(remoteConfig.url);
    client.setBasicAuth(deviceName, remoteConfig.devicePassword);
    return client.put("cozy/" + newId, {
      docType: 'Binary'
    }, function(err, res, body) {
      if (err != null) {
        throw err;
      }
      if (body.error != null) {
        throw new Error(body.error);
      }
      return callback(err, body);
    });
  },
  getRemoteDoc: function(remoteId, callback) {
    var client, deviceName;
    deviceName = config.getDeviceName();
    client = request.newClient(remoteConfig.url);
    client.setBasicAuth(deviceName, remoteConfig.devicePassword);
    return client.get("cozy/" + remoteId, function(err, res, body) {
      if (err != null) {
        throw err;
      }
      if (body.error != null) {
        throw new Error(body.error);
      }
      body.id = body._id;
      body.rev = body._rev;
      return callback(err, body);
    });
  },
  saveLocation: function(filePath, id, rev, callback) {
    return pouch.db.getAsync(id).then(function(doc) {
      return pouch.db.removeAsync(doc);
    })["catch"](function(err) {
      if (err.status !== 404) {
        throw err;
      }
    }).then(function() {
      return pouch.db.putAsync({
        _id: id,
        _rev: rev,
        docType: 'Binary',
        path: filePath
      })["catch"](function(err) {
        if (err.status !== 409) {
          throw err;
        }
      }).then(function() {
        return callback(null);
      });
    })["catch"](function(err) {
      log.error(err.toString());
      console.error(err);
      return callback(err);
    });
  },
  fetchAll: function(deviceName, callback) {
    if (deviceName == null) {
      deviceName = config.getDeviceName();
    }
    log.info("Fetching all binaries");
    return require('./filesystem').buildTreeAsync(null).bind(this).then(function() {
      return pouch.db.queryAsync('file/all');
    }).get('rows').filter(function(doc) {
      return doc.value.binary != null;
    }).each(function(doc) {
      return this.fetchFromDocAsync(deviceName, doc.value);
    }).then(function() {
      return callback(null);
    })["catch"](function(err) {
      log.error(err.toString());
      console.error(err);
      return callback(err);
    });
  },
  fetchOne: function(deviceName, filePath, callback) {
    if (deviceName == null) {
      deviceName = config.getDeviceName();
    }
    log.info("Fetching binary: " + filePath);
    return require('./filesystem').buildTreeAsync(filePath).bind(this).then(function() {
      return pouch.db.queryAsync('file/all');
    }).get('rows').filter(function(doc) {
      return path.join(doc.value.path, doc.value.name) === filePath;
    }).each(function(doc) {
      return this.fetchFromDocAsync(deviceName, doc.value);
    }).then(function() {
      return callback(null);
    })["catch"](function(err) {
      log.error(err.toString());
      console.error(err);
      return callback(err);
    });
  },
  fetchFromDoc: function(deviceName, doc, callback) {
    var binaryPath, filePath, relativePath;
    if (deviceName == null) {
      deviceName = config.getDeviceName();
    }
    filePath = path.join(doc.path, doc.name);
    binaryPath = path.join(remoteConfig.path, filePath);
    relativePath = path.relative(remoteConfig.path, filePath);
    return pouch.db.getAsync(doc.binary.file.id).bind(this).then(function(binaryDoc) {
      return pouch.db.removeAsync(binaryDoc).then(function() {
        if ((binaryDoc.path != null) && binaryDoc.path !== binaryPath) {
          return fs.renameSync(binaryDoc.path, binaryPath);
        }
      })["catch"](function(err) {
        if (err.status !== 409) {
          throw err;
        }
      });
    })["catch"](function(err) {
      if (err.status !== 404) {
        throw err;
      }
    }).then(function() {
      var client;
      if (!(fs.existsSync(binaryPath) && fs.statSync(binaryPath).size === doc.size)) {
        client = request.newClient(remoteConfig.url);
        client.setBasicAuth(deviceName, remoteConfig.devicePassword);
        log.info("Downloading binary: " + relativePath);
        return client.saveFileAsync("cozy/" + doc.binary.file.id + "/file", binaryPath).then(function() {
          return log.info("Binary downloaded: " + relativePath);
        });
      }
    }).then(function() {
      return this.saveLocationAsync(binaryPath, doc.binary.file.id, doc.binary.file.rev);
    }).then(function() {
      return fs.utimesAsync(binaryPath, new Date(doc.creationDate), new Date(doc.lastModification));
    }).then(function() {
      return callback(null);
    })["catch"](function(err) {
      log.error(err.toString());
      console.error(err);
      return callback(err);
    });
  }
};

Promise = require('bluebird');

Promise.promisifyAll(module.exports);
