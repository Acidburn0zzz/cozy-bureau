// Generated by CoffeeScript 1.8.0
var binary, config, filesystem, filters, fs, log, pouch, remoteConfig, request, touch, urlParser;

fs = require('fs');

touch = require('touch');

request = require('request-json');

urlParser = require('url');

log = require('printit')({
  prefix: 'Data Proxy | replication'
});

pouch = require('./db');

config = require('./config');

filesystem = require('./filesystem');

binary = require('./binary');

filters = [];

remoteConfig = config.getConfig();

module.exports = {
  registerDevice: function(options, callback) {
    var client, data;
    client = request.newClient(options.url);
    client.setBasicAuth('owner', options.password);
    data = {
      login: options.deviceName
    };
    return client.postAsync('device/', data).then(function(res, body) {
      return callback(null, {
        id: body.id,
        password: body.password
      });
    })["catch"](function(err) {
      log.error(err.toString());
      console.error(err);
      return callback(err);
    });
  },
  unregisterDevice: function(options, callback) {
    var client;
    client = request.newClient(options.url);
    client.setBasicAuth('owner', options.password);
    return client.delAsync("device/" + options.deviceId + "/").then(function(res, body) {
      return callback(null);
    })["catch"](function(err) {
      log.error(err.toString());
      console.error(err);
      return callback(err);
    });
  },
  runReplication: function(fromRemote, toRemote, continuous, rebuildFs, fetchBinary, callback) {
    var applyChanges, deviceName, needTreeRebuild, options, replicate, url;
    deviceName = config.getDeviceName();
    if (continuous == null) {
      continuous = false;
    }
    if (rebuildFs == null) {
      rebuildFs = false;
    }
    if (fetchBinary == null) {
      fetchBinary = false;
    }
    if (fromRemote && !toRemote) {
      log.info("Running replication from remote database");
      replicate = pouch.db.replicate.from;
    } else if (toRemote && !fromRemote) {
      log.info("Running replication to remote database");
      replicate = pouch.db.replicate.to;
    } else {
      log.info("Running synchronization with remote database");
      replicate = pouch.db.sync;
    }
    options = {
      filter: function(doc) {
        return doc.docType === 'Folder' || doc.docType === 'File';
      },
      live: continuous
    };
    applyChanges = function(callback) {
      filesystem.watchingLocked = true;
      if (fetchBinary) {
        return binary.fetchAll(deviceName, function() {
          filesystem.watchingLocked = false;
          return callback(null);
        });
      } else {
        return filesystem.buildTree(null, function() {
          filesystem.watchingLocked = false;
          return callback(null);
        });
      }
    };
    needTreeRebuild = false;
    url = urlParser.parse(remoteConfig.url);
    url.auth = "" + deviceName + ":" + remoteConfig.devicePassword;
    return replicate(urlParser.format(url) + 'cozy', options).on('change', function(info) {
      var changeMessage;
      changeMessage = "DB change: " + info.change.docs_written + " doc(s) written";
      if (info.direction) {
        changeMessage = "" + info.direction + " " + changeMessage;
      }
      if (((info.direction == null) && fromRemote && info.docs_written > 0) || (info.direction === 'pull' && info.change.docs_written > 0)) {
        return needTreeRebuild = rebuildFs;
      }
    }).on('uptodate', function(info) {
      log.info('Replication is complete');
      if (needTreeRebuild) {
        log.info('Applying changes on the filesystem');
        return applyChanges(function() {
          return needTreeRebuild = false;
        });
      }
    }).on('complete', function(info) {
      log.info('Replication is complete');
      if (fromRemote && !toRemote) {
        log.info('Applying changes on the filesystem');
        return applyChanges(function() {
          return callback(null);
        });
      } else {
        return callback(null);
      }
    }).on('error', function(err) {
      log.error(err);
      return callback(err);
    });
  }
};
