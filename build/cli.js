#!/usr/bin/env node
// Generated by CoffeeScript 1.8.0
var addRemote, binary, config, displayConfig, filesystem, getPassword, log, path, pouch, process, program, promise, read, removeRemote, replication;

path = require('path');

program = require('commander');

read = require('read');

process = require('process');

log = require('printit')({
  prefix: 'Data Proxy'
});

promise = require('./backend/promise');

config = require('./backend/config');

replication = require('./backend/replication');

filesystem = require('./backend/filesystem');

binary = require('./backend/binary');

pouch = require('./backend/db');

getPassword = function(callback) {
  var promptMsg;
  promptMsg = 'Please enter your password to register your device to ' + 'your remote Cozy: ';
  return read({
    prompt: promptMsg,
    silent: true
  }, callback);
};

addRemote = function(url, deviceName, syncPath) {
  return getPassword(function(err, password) {
    var options;
    options = {
      url: url,
      deviceName: deviceName,
      password: password
    };
    return replication.registerDevice(options, function(err, credentials) {
      if (err) {
        log.error(err);
        return log.error('An error occured while registering your device.');
      } else {
        options = {
          url: url,
          deviceName: deviceName,
          path: path.resolve(syncPath),
          deviceId: credentials.id,
          devicePassword: credentials.password
        };
        config.addRemoteCozy(options);
        return log.info('Remote Cozy properly configured to work ' + 'with current device.');
      }
    });
  });
};

removeRemote = function(args) {
  var deviceName, remoteConfig;
  remoteConfig = config.getConfig();
  deviceName = args.deviceName || config.getDeviceName();
  return getPassword(function(err, password) {
    var options;
    options = {
      url: remoteConfig.url,
      deviceId: remoteConfig.deviceId,
      password: password
    };
    return replication.unregisterDevice(options, function(err) {
      if (err) {
        log.error(err);
        return log.error('An error occured while unregistering your device.');
      } else {
        config.removeRemoteCozy(deviceName);
        return log.info('Current device properly removed from remote cozy.');
      }
    });
  });
};

displayConfig = function() {
  return console.log(JSON.stringify(config.config, null, 2));
};

program.command('add-remote-cozy <url> <devicename> <syncPath>').description('Configure current device to sync with given cozy').option('-d, --deviceName [deviceName]', 'device name to deal with').action(addRemote);

program.command('remove-remote-cozy').description('Unsync current device with its remote cozy').action(removeRemote);

program.command('sync').description('Sync databases, apply and/or watch changes').option('-d, --deviceName [deviceName]', 'device name to deal with').option('-n, --noBinary', 'ignore binary fetching').option('-i, --initial', 're-detect all the files').option('-f, --fromRemote', 'replicate from remote database').option('-t, --toRemote', 'replicate to remote database').action(function(args) {
  var fetchBinary, fromNow;
  if (args.noBinary == null) {
    args.noBinary = false;
  }
  fetchBinary = !args.noBinary;
  if (args.initial == null) {
    args.initial = false;
  }
  fromNow = !args.initial;
  if (args.toRemote || (!args.toRemote && !args.fromRemote)) {
    filesystem.watchChanges(true, fromNow);
  }
  return replication.runReplication(args.fromRemote, args.toRemote, true, true, fetchBinary, function() {});
});

program.command('replicate').description('Replicate file/folder database documents').option('-d, --deviceName [deviceName]', 'device name to deal with').option('-f, --fromRemote', 'replicate from remote database').option('-t, --toRemote', 'replicate to remote database').option('-c, --continuous', 'replicate to remote database').action(function(args) {
  return replication.runReplication(args.fromRemote, args.toRemote, args.continuous, false, false, function() {});
});

program.command('show-binaries').description('Show local binary DB documents (debug function)').action(function() {
  return pouch.db.query('binary/all', function(err, res) {
    var doc, _i, _len, _ref, _results;
    _ref = res.rows;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      doc = _ref[_i];
      _results.push(console.log(doc.value.path));
    }
    return _results;
  });
});

program.command('build-tree').description('Create empty files and directories in the filesystem').option('-d, --deviceName [deviceName]', 'device name to deal with').option('-f, --filePath [filePath]', 'specify file to build FS tree').action(function(args) {
  return filesystem.buildTree(args.filePath, function() {});
});

program.command('fetch-binary').description('Replicate DB binaries').option('-d, --deviceName [deviceName]', 'device name to deal with').option('-f, --filePath [filePath]', 'specify file to fetch associated binary').action(function(args) {
  if (args.filePath != null) {
    return binary.fetchOne(args.deviceName, args.filePath, function() {});
  } else {
    return binary.fetchAll(args.deviceName, function() {});
  }
});

program.command('put-file <filePath>').description('Add file descriptor to PouchDB').option('-d, --deviceName [deviceName]', 'device name to deal with').action(function(filePath, args) {
  return filesystem.createFileDoc(filePath, function() {});
});

program.command('put-dir <dirPath>').description('Add folder descriptor to PouchDB').option('-d, --deviceName [deviceName]', 'device name to deal with').option('-r, --recursive', 'add every file/folder inside').action(function(dirPath, args) {
  if (args.recursive != null) {
    return filesystem.createDirectoryContentDoc(dirPath, function() {});
  } else {
    return filesystem.createDirectoryDoc(dirPath, function() {});
  }
});

program.command('display-config').description('Display device configuration and exit').action(displayConfig);

program.command("*").description("Display help message for an unknown command.").action(function() {
  return console.log('Unknown command, run "cozy-monitor --help"' + ' to know the list of available commands.');
});

program.parse(process.argv);
