{"version":3,"sources":["app/application.coffee","app/collections/files.coffee","app/collections/upload_queue.coffee","app/initialize.coffee","app/locales/en.coffee","app/models/test.coffee","app/router.coffee","app/views/templates/test.jade","app/views/test.coffee","app/widgets/test.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app.js","sourcesContent":["\nmodule.exports =\n\n    initialize: ->\n\n        # if the application is browsed by a guest or not\n        # we use that in various places of the application (as few as possible)\n        @isPublic = window.location.pathname.indexOf('/public/') is 0\n\n        Router = require 'router'\n        @router = new Router()\n\n        # for easy debugging in browser (and dirty tricks)\n        window.app = @\n\n        Backbone.history.start()\n\n        # Makes this object immuable.\n        Object.freeze this if typeof Object.freeze is 'function'\n","File = require '../models/file'\n\n###\nRepresents a collection of files\nIt acts as the cache when instantiate as the baseCollection\nThe base collection holds ALL the files and folders of the application\nIt creates projections (subcollection) that will be consumed by folder views.\nThose projections represents one folder.\n###\nmodule.exports = class FileCollection extends Backbone.Collection\n\n    # Model that will be contained inside the collection.\n    model: File\n\n    # This is where ajax requests the backend.\n    url: 'files'\n\n    cachedPaths: []\n\n    isPathCached: (path) -> @cachedPaths.indexOf(path) isnt -1\n\n    ###\n        Retrieves folder's information (meta data)\n        * from memory if it's cached\n        * otherwise, from server\n    ###\n    getFolderInfo: (folderID, callback) ->\n        folder = @get folderID\n        unless folder?\n            #console.log \"fetch folder info\"\n            folder = new File id: folderID, type: \"folder\"\n            folder.fetch\n                success: =>\n                    @add folder\n                    callback null, folder\n                error: (xhr, resp) ->\n                    callback status: resp.status, msg: resp.statusText\n        else\n            #console.log \"[cache] fetch folder info\"\n            callback null, folder\n\n    # Retrieves folder's content (files and folders in it)\n    getFolderContent: (folder, callback = ->) ->\n        #console.log \"fetch folder content\"\n        path = folder.getRepository()\n        folder.fetchContent (err, content, parents) =>\n            if err?\n                callback err\n            else\n                # adds the new models (updates them if already in collection)\n                @set content, remove: false\n\n                # we handle deletion manually because\n                # they must be based on  projection, not baseCollection\n                contentIDs = _.pluck content, 'id'\n                path = folder.getRepository()\n                itemsToRemove = @getSubCollection(path).filter (item) ->\n                    return item.get('id') not in contentIDs\n                @remove itemsToRemove\n\n                # we mark as cached the folder if it's the first time we load\n                # its content\n                @cachedPaths.push path unless @isPathCached path\n                callback()\n\n    ###\n        Global method to retrieve folder's info and content\n        and create a subcollection (projection) based on the current collection\n    ###\n    getByFolder: (folderID, callback) ->\n        @getFolderInfo folderID, (err, folder) =>\n            if err? then callback err\n            else\n                path = folder.getRepository()\n                filter = (file) ->\n                    file.get('path') is path and not file.isRoot()\n\n                collection = new BackboneProjections.Filtered @,\n                                    filter: filter\n                                    comparator: @comparator\n\n                if @isPathCached path\n                    #console.log \"[cache] fetch folder content\"\n                    callback null, folder, collection\n                else\n                    # we retrieve at the same time the folder's content\n                    # and the folder's breadcrumb\n                    @getFolderContent folder, ->\n                        callback null, folder, collection\n\n    existingPaths: ->\n        @map (model) -> model.getRepository()\n\n    # Creates a sub collection (projection) based on the current collection\n    getSubCollection: (path) ->\n        filter = (file) ->\n            return file.get('path') is path and not file.isRoot()\n        return new BackboneProjections.Filtered @,\n                            filter: filter\n                            comparator: @comparator\n\n    comparator: (f1, f2) ->\n\n        # default values\n        @type = 'name' unless @type?\n        @order = 'asc' unless @order?\n\n        t1 = f1.get 'type'\n        t2 = f2.get 'type'\n\n        # new folders should be at the topmost\n        if f1.isFolder() and not f2.isFolder() and f1.isNew() then return -1\n        if f2.isFolder() and not f1.isFolder() and f2.isNew() then return 1\n\n        if @type is 'name'\n            n1 = f1.get('name').toLocaleLowerCase()\n            n2 = f2.get('name').toLocaleLowerCase()\n        else if @type is \"lastModification\"\n            n1 = new Date(f1.get 'lastModification').getTime()\n            n2 = new Date(f2.get 'lastModification').getTime()\n        else\n            n1 = f1.get @type\n            n2 = f2.get @type\n\n        sort = if @order is 'asc' then -1 else 1\n\n        if t1 is t2\n            if @type is 'class' and n1 is n2\n\n                # Sort by name if the class is the same\n                n1 = f1.get('name').toLocaleLowerCase()\n                n2 = f2.get('name').toLocaleLowerCase()\n\n                # Get both file extensions\n                e1 = n1.split('.').pop()\n                e2 = n2.split('.').pop()\n\n                if e1 isnt e2\n                    # Sort by file extension if they are different\n                    if e1 > e2 then return -sort\n                    if e1 < e2 then return sort\n                    return 0\n\n            # Sort normally\n            if n1 > n2 then return -sort\n            else if n1 < n2 then return sort\n            else return 0\n\n        else if t1 is 'file' and t2 is 'folder'\n            return 1\n        else # t1 is 'folder' and t2 is 'file'\n            return -1\n","File = require '../models/file'\nHelpers = require '../lib/folder_helpers'\n\n# the uploadQueue is a mix of async.queue & BackoneCollection\n# blobs are added to the queue & to the collection\n# on upload success, File Models are marked as loaded\n# on\n\nmodule.exports = class UploadQueue extends Backbone.Collection\n\n    # number of files actually loaded\n    loaded: 0\n\n    # list of paths where files are being uploaded\n    uploadingPaths: {}\n\n    initialize: ->\n        @asyncQueue = async.queue @uploadWorker, 5\n\n        # when a model is added, we queue it for upload\n        @listenTo this, 'add', (model) =>\n            @completed = false\n            # Files at the bottom, Folder at the top\n            if model.get('type') is 'file' then @asyncQueue.push model\n            else if model.get('type') is 'folder' then @asyncQueue.unshift model\n            else throw new Error('adding wrong typed model to upload queue')\n\n        # never happens, but should be handled\n        @listenTo this, 'remove', (model) =>\n            model.error = 'aborted'\n\n        # when an upload completes or fails, we keep counts\n        @listenTo this, 'sync error', (model) =>\n            path = model.get('path') + '/'\n            @uploadingPaths[path]--\n            @loaded++\n\n        # proxy progress events, throttled to every 100ms\n        @listenTo this, 'progress', _.throttle =>\n            @trigger 'upload-progress', @computeProgress()\n        , 100\n\n        # when the queue is totally completed\n        @asyncQueue.drain = =>\n            @completed = true\n            @trigger 'upload-complete'\n\n    add: ->\n        @reset() if @completed\n        super\n\n    reset: (models, options) ->\n        @loaded = 0\n        @completed = false\n        @uploadingPaths = {}\n        super\n\n    computeProgress: =>\n        return @progress =\n            loadedFiles: @loaded\n            totalFiles: @length\n            loadedBytes: @sumProp 'loaded'\n            totalBytes: @sumProp 'total'\n\n    sumProp: (prop) =>\n        iter = (sum, model) -> sum + model[prop]\n        @reduce iter, 0\n\n    uploadWorker: (model, cb) =>\n        if model.existing or model.error or model.isUploaded\n            setTimeout cb, 10\n\n        model.save null,\n            success: ->\n                model.file = null\n                model.isUploaded = true\n                model.loaded = model.total\n                unless app.baseCollection.get model.id\n                    app.baseCollection.add model\n                cb null\n            error: (_, err) =>\n                body = try JSON.parse(err.responseText)\n                catch e then msg: null\n\n                if err.status is 400 and body.code is 'EEXISTS'\n                    model.existing = true\n                    return cb new Error body.msg\n\n                if err.status is 400 and body.code is 'ESTORAGE'\n                    model.error = new Error body.msg\n                    return cb model.error\n\n                model.tries = 1 + (model.tries or 0)\n                if model.tries > 3\n                    model.error = t err.msg or \"modal error file upload\"\n                else\n                    # let's try again\n                    @asyncQueue.push model\n                cb err\n\n    addBlobs: (blobs, folder) ->\n\n        i = 0\n        existingPaths = app.baseCollection.existingPaths()\n        # we do a non blocking loop, handling one file every 2ms so the\n        # UI don't get stuck\n        do nonBlockingLoop = =>\n            return unless blob = blobs[i++]\n\n            path = folder.getRepository() or ''\n            relPath = blob.relativePath or\n                blob.mozRelativePath or\n                blob.webkitRelativePath or\n                blob.msRelativePath\n\n            if relPath then path += '/' + Helpers.dirName relPath\n\n            model = new File\n                type: 'file'\n                class: 'document'\n                size: blob.size\n                name: blob.name\n                path: path\n                lastModification: blob.lastModifiedDate\n\n            if model.getRepository() in existingPaths\n                model.existing = true\n            else\n                model.file = blob\n                model.loaded = 0\n                model.total = blob.size\n\n            @add model\n            @markAsBeingUploaded model\n\n            setTimeout nonBlockingLoop, 2\n\n    addFolderBlobs: (blobs, parent) ->\n\n        dirs = Helpers.nestedDirs blobs\n        i = 0\n        #console.log dirs\n        do nonBlockingLoop = =>\n\n            # if no more folders to add, leave the loop\n            unless dir = dirs[i++]\n                # folders will be created\n                # we can safely add files to bottom of queue\n                blobs = _.filter blobs, (blob) ->\n                    blob.name not in ['.', '..']\n                @addBlobs blobs, parent\n                return\n\n            prefix = parent.getRepository()\n            parts = dir.split('/').filter (x) -> x # ?remove empty last part\n            name = parts[parts.length - 1]\n            path = [prefix].concat(parts[...-1]).join '/'\n\n            folder = new File\n                type: \"folder\"\n                name: name\n                path: path\n\n            folder.loaded = 0\n            folder.total = 250 # ~ size of the query\n\n            # add folder to be saved\n            @add folder\n            @markAsBeingUploaded folder\n\n            setTimeout nonBlockingLoop, 2\n\n    filteredByFolder: (folder, comparator) ->\n        filteredUploads = new BackboneProjections.Filtered this,\n            filter: (file) ->\n                return file.get('path') is folder.getRepository() and\n                    not file.isUploaded\n\n            comparator: comparator\n\n    getResults: ->\n        error = []\n        existing = []\n        success = 0\n\n        @each (model) ->\n            if model.error\n                console.log \"Upload Error\", model.getRepository(), model.error\n                error.push model\n            else if model.existing then existing.push model\n            else success++\n\n        status = if error.length then 'error'\n        else if existing.length then 'warning'\n        else 'success'\n\n        return {status, error, existing, success}\n\n    # we keep track of models being uploaded by path\n    markAsBeingUploaded: (model) ->\n        # appending a / prevents conflict with elements\n        # having the same prefix in their names\n        path = model.get('path') + '/'\n        unless @uploadingPaths[path]?\n            @uploadingPaths[path] = 0\n\n        @uploadingPaths[path]++\n\n    # returns the number of children elements being uploading for a given path\n    getNumUploadingElementsByPath: (path) ->\n        # appending a / prevents conflict with elements\n        # having the same prefix in their names\n        path = path + '/'\n\n        return _.reduce @uploadingPaths, (memo, value, index) ->\n            if index.indexOf(path) isnt -1 or path is ''\n                return memo + value\n            else\n                return memo\n        , 0\n","app = require 'application'\n\n$ ->\n    jQuery.event.props.push 'dataTransfer'\n\n    locale = window.locale or \"en\" # default locale\n    moment.lang locale\n\n    locales = {}\n    try\n        locales = require \"locales/#{locale}\"\n    catch err\n        locales = require \"locales/en\"\n\n    polyglot = new Polyglot()\n\n    # we give polyglot the data\n    polyglot.extend locales\n\n    # handy shortcut\n    window.t = polyglot.t.bind polyglot\n\n    # launch the app\n    app.initialize()\n","module.exports =\n\n\t\"ok\": \"OK\"\n","","app = require 'application'\n\n###\nBinds routes to code actions.\nThis is also used as a controller to initialize views and perform data fetching\n###\nmodule.exports = class Router extends Backbone.Router\n\n    routes:\n        '': 'main'\n        'config/:devicename' : 'config'\n        'search/:query' : 'search'\n\n    main: ->\n\n    config: (devicename) ->\n","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\n\n;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","",""]}